/*  NAME: VISHVAJIT KHER
    ASSIGNMENT 1
    CRN - 46913
	ID:101015270 */

/*
1.	WRITE A SELECT STATEMENT THAT RETURNS ONE ROW FOR EACH CATEGORY THAT HAS PRODUCTS WITH THESE COLUMNS:
THE CATEGORY_NAME COLUMN FROM THE CATEGORIES TABLE
THE COUNT OF THE PRODUCTS IN THE PRODUCTS TABLE
THE LIST PRICE OF THE MOST EXPENSIVE PRODUCT IN THE PRODUCTS TABLE
SORT THE RESULT SET SO THE CATEGORY WITH THE MOST PRODUCTS APPEARS FIRST.
*/

/*/QUESTION 1/*/
SELECT C.CATEGORY_NAME "CATEGORY", COUNT(P.PRODUCT_ID) AS "COUNT OF PRODUCT", MAX(LIST_PRICE) "MOST EXPENSIVE PRODUCT PRICE"
FROM CATEGORIES C LEFT OUTER JOIN PRODUCTS P ON (P.CATEGORY_ID = C.CATEGORY_ID)
GROUP BY C.CATEGORY_NAME
ORDER BY 2 DESC;

/*/QUESTION2/*/
/*2.	WRITE A SELECT STATEMENT THAT RETURNS ONE ROW FOR EACH CUSTOMER THAT HAS ORDERS WITH THESE COLUMNS:
THE EMAIL_ADDRESS COLUMN FROM THE CUSTOMERS TABLE
THE SUM OF THE ITEM PRICE IN THE ORDER_ITEMS TABLE MULTIPLIED BY THE QUANTITY IN THE ORDER_ITEMS TABLE
THE SUM OF THE DISCOUNT AMOUNT COLUMN IN THE ORDER_ITEMS TABLE MULTIPLIED BY THE QUANTITY IN THE ORDER_ITEMS TABLE
SORT THE RESULT SET IN DESCENDING SEQUENCE BY THE ITEM PRICE TOTAL FOR EACH CUSTOMER.
*/

SELECT  C.FIRST_NAME||' '||C.LAST_NAME "CUSTOMER NAME", C.EMAIL_ADDRESS AS "EMAIL",
  TO_NUMBER(SUM(I.ITEM_PRICE * I.QUANTITY),'999999.99') "ORDER PRICE", TO_CHAR(SUM(I.DISCOUNT_AMOUNT * I.QUANTITY),'999990.99') "DISCOUNT"
FROM ORDERS O RIGHT OUTER JOIN CUSTOMERS C ON (C.CUSTOMER_ID = O.CUSTOMER_ID)
      FULL OUTER JOIN ORDER_ITEMS I ON (O.ORDER_ID = I.ORDER_ID)
GROUP BY C.CUSTOMER_ID, C.FIRST_NAME||' '||C.LAST_NAME, C.EMAIL_ADDRESS
ORDER BY 4 DESC;

/*/QUESTION 3*/
/*3.	WRITE A SELECT STATEMENT THAT RETURNS ONE ROW FOR EACH CUSTOMER THAT HAS ORDERS WITH THESE COLUMNS:
THE EMAIL_ADDRESS FROM THE CUSTOMERS TABLE
A COUNT OF THE NUMBER OF ORDERS
THE TOTAL AMOUNT FOR EACH ORDER (HINT: FIRST, SUBTRACT THE DISCOUNT AMOUNT FROM THE PRICE. THEN, MULTIPLY BY THE QUANTITY.)
RETURN ONLY THOSE ROWS WHERE THE CUSTOMER HAS MORE THAN 1 ORDER.
*/
SELECT C.CUSTOMER_ID,C.EMAIL_ADDRESS,COUNT(O.ORDER_ID)"NUMBERS OF ORDERS",SUM((I.ITEM_PRICE-I.DISCOUNT_AMOUNT)*I.QUANTITY) "TOTAL"
FROM ORDERS O  RIGHT OUTER JOIN CUSTOMERS C ON (C.CUSTOMER_ID=O.CUSTOMER_ID)
LEFT OUTER JOIN ORDER_ITEMS I ON (O.ORDER_ID=I.ORDER_ID)
GROUP BY C.CUSTOMER_ID,C.EMAIL_ADDRESS 
HAVING COUNT(O.ORDER_ID)>1;

/*QUESTION 4*/
/*4.	WRITE A SELECT STATEMENT THAT ANSWERS THIS QUESTION:
WHAT IS THE TOTAL AMOUNT ORDERED FOR EACH PRODUCT? RETURN THESE COLUMNS:
THE PRODUCT NAME FROM THE PRODUCTS TABLE
THE TOTAL AMOUNT FOR EACH PRODUCT IN THE ORDER_ITEMS
(HINT: YOU CAN CALCULATE THE TOTAL AMOUNT BY SUBTRACTING THE DISCOUNT AMOUNT FROM THE ITEM PRICE AND THEN MULTIPLYING IT BY THE QUANTITY)
USE THE ROLLUP OPERATOR TO INCLUDE A ROW THAT GIVES THE GRAND TOTAL.
*/
  SELECT P.PRODUCT_NAME,SUM((ITEM_PRICE-I.DISCOUNT_AMOUNT)*I.QUANTITY), COUNT(I.ITEM_ID)
  FROM PRODUCTS P LEFT OUTER JOIN ORDER_ITEMS I ON (P.PRODUCT_ID=I.PRODUCT_ID)
  GROUP BY ROLLUP(P.PRODUCT_NAME);

/*QUESTION 5*/
/*5.	WRITE A SELECT STATEMENT THAT ANSWERS THIS QUESTION: WHICH CUSTOMERS HAVE ORDERED MORE THAN ONE PRODUCT? RETURN THESE COLUMNS:
THE EMAIL ADDRESS FROM THE CUSTOMERS TABLE	
THE COUNT OF DISTINCT PRODUCTS FROM THE CUSTOMER’S ORDERS
*/

SELECT C.CUSTOMER_ID,C.EMAIL_ADDRESS,COUNT(DISTINCT I.PRODUCT_ID)"NUMBERS OF PRODUCTS"
FROM ORDERS O  RIGHT OUTER JOIN CUSTOMERS C ON (C.CUSTOMER_ID=O.CUSTOMER_ID)
LEFT OUTER JOIN ORDER_ITEMS I ON (O.ORDER_ID=I.ORDER_ID)
GROUP BY C.CUSTOMER_ID,C.EMAIL_ADDRESS 
HAVING COUNT(DISTINCT I.PRODUCT_ID)>1;

/*QUESTION 6*/
/*6.   WRITE A SELECT STATEMENT THAT RETURNS THE SAME RESULT SET AS
THIS SELECT STATEMENT, BUT DON’T USE A JOIN. INSTEAD, USE A SUBQUERY IN A WHERE CLAUSE THAT USES THE IN KEYWORD.
SELECT DISTINCT CATEGORY_NAME
FROM CATEGORIES C JOIN PRODUCTS P
  ON C.CATEGORY_ID = P.CATEGORY_ID
ORDER BY CATEGORY_NAME
*/

SELECT DISTINCT CATEGORY_NAME
FROM CATEGORIES C , PRODUCTS P
  WHERE C.CATEGORY_ID = P.CATEGORY_ID
ORDER BY CATEGORY_NAME;

/*QUESTION 7*/
/*7.  WRITE A SELECT STATEMENT THAT ANSWERS THIS QUESTION:
WHICH PRODUCTS HAVE A LIST PRICE THAT’S GREATER THAN THE AVERAGE LIST PRICE FOR ALL PRODUCTS?
RETURN THE PRODUCT_NAME AND LIST_PRICE COLUMNS FOR EACH PRODUCT.
SORT THE RESULTS BY THE LIST_PRICE COLUMN IN DESCENDING SEQUENCE.
*/

SELECT PRODUCT_NAME, LIST_PRICE FROM PRODUCTS
WHERE LIST_PRICE > (SELECT AVG(LIST_PRICE) FROM PRODUCTS);

/*QUESTION 8*/
/*8.  WRITE A SELECT STATEMENT THAT RETURNS THE CATEGORY_NAME COLUMN FROM THE CATEGORIES TABLE.
RETURN ONE ROW FOR EACH CATEGORY THAT HAS NEVER BEEN ASSIGNED TO ANY PRODUCT IN THE PRODUCTS TABLE.
TO DO THAT, USE A SUBQUERY INTRODUCED WITH THE NOT EXISTS OPERATOR.
*/

SELECT * FROM CATEGORIES C
WHERE NOT EXISTS (SELECT CATEGORY_ID FROM PRODUCTS P WHERE P.CATEGORY_ID  = C.CATEGORY_ID);

/*NUMBER 9*/
/*9. WRITE A SELECT STATEMENT THAT RETURNS THE NAME AND DISCOUNT PERCENT OF EACH PRODUCT
THAT HAS A UNIQUE DISCOUNT PERCENT. IN OTHER WORDS, DON’T INCLUDE PRODUCTS THAT HAVE THE SAME DISCOUNT PERCENT AS ANOTHER PRODUCT.
SORT THE RESULTS BY THE PRODUCT_NAME COLUMN.
*/

SELECT PRODUCT_NAME, DISCOUNT_PERCENT FROM PRODUCTS 
WHERE PRODUCT_ID NOT IN (
SELECT  A.PRODUCT_ID FROM PRODUCTS A, PRODUCTS B WHERE (A.DISCOUNT_PERCENT = B.DISCOUNT_PERCENT AND A.PRODUCT_ID <> B.PRODUCT_ID)
) ORDER BY PRODUCT_NAME;

/*NUMBER 10*/
/*10. USE A CORRELATED SUBQUERY TO RETURN ONE ROW PER CUSTOMER, REPRESENTING THE CUSTOMER’S OLDEST ORDER 
(THE ONE WITH THE EARLIEST DATE). EACH ROW SHOULD INCLUDE THESE THREE COLUMNS: EMAIL_ADDRESS, ORDER_ID, AND ORDER_DATE.*/

SELECT C.EMAIL_ADDRESS, O.ORDER_ID, OD.MD "ORDER DATE "
FROM CUSTOMERS C, ORDERS O,
(SELECT CUSTOMER_ID, MIN(ORDER_DATE) MD FROM ORDERS GROUP BY CUSTOMER_ID) OD
WHERE (C.CUSTOMER_ID = OD.CUSTOMER_ID) AND (O.CUSTOMER_ID = OD.CUSTOMER_ID AND O.ORDER_DATE =  OD.MD);


